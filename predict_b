import pandas as pd
import numpy as np
import os
import seaborn as sns
import matplotlib.pyplot as plt
from datasets import load_dataset

import torch 
import torch.nn as nn
import torch.optim as optim
from torch.optim.lr_scheduler import CosineAnnealingLR # или другой scheduler
from torch.utils.data import Dataset, DataLoader
import wandb

from pyproj import Transformer, CRS
from mpl_toolkits.mplot3d import Axes3D
import gc
import laspy
import open3d as o3d

import warnings
warnings.simplefilter(action='ignore')

from tqdm.auto import tqdm
tqdm.pandas()

import seaborn as sns

train_df = pd.read_csv('/kaggle/input/power-line-security-zone-vegetation-detection/train.csv').drop_duplicates().reset_index(drop=True)
print('shape: ', train_df.shape)
train_df.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
train_df['class'] = le.fit_transform(train_df['class'])
classes = {i: class_name for i, class_name in enumerate(le.classes_)}

def group2box(row):
    return np.array([row['center_x'], row['center_y'], row['center_z'], row['size_x'], row['size_y'], row['size_z'], row['yaw'], row['class']])

train_df['answer'] = train_df.apply(group2box, axis=1)
train_df = train_df[['file_name', 'answer']]

new_df = train_df.groupby('file_name').agg(lambda x: np.array(x)).reset_index()
new_df['counts'] = new_df.answer.map(len)

def reshape_arrays(row):
    return np.concatenate(row['answer']).reshape(row['counts'], 8)
    
new_df['answer'] = new_df.apply(reshape_arrays, axis=1)

ds = load_dataset("Eka-Korn/power_line_lidar_data")

train_counts = pd.read_csv('/kaggle/input/power-line-counts/train_counts.csv').T.reset_index()
train_counts['index'] = train_counts['index'].map(lambda x: x[:-4])

test_counts = pd.read_csv('/kaggle/input/power-line-counts/test_counts.csv').T.reset_index()
test_counts['index'] = test_counts['index'].map(lambda x: x[:-4])

counts_df = pd.DataFrame(np.concatenate([train_counts, test_counts]))
counts_df['len'] = counts_df[2] - counts_df[1]
counts_df = counts_df.rename(columns={0:'file_name'})
df_full = pd.merge(counts_df, new_df[['file_name', 'counts']], on='file_name')

sns.pairplot(df_full[['len', 'counts']])
